class Solution {
public:
    unordered_map<int, vector<int>> adj;
    void addEdge(int u, int v) {
        adj[u].push_back(v);
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> ans;
        for(int i =0; i<prerequisites.size(); i++) {
            addEdge(prerequisites[i][1], prerequisites[i][0]);
        }
        vector<int> indegree(numCourses, 0);
        for (auto i : adj) {
            for (auto j : i.second) {
                indegree[j]++;
            }
        }
        queue<int> q;
        for (int i =0; i<indegree.size(); i++) {
            if(indegree[i] == 0)
                q.push(i);
        }
        int count = 0;
        while(!q.empty()) {
            int front = q.front();
            ans.push_back(front);
            q.pop();
            count++;
            for (auto i : adj[front]) {
                indegree[i] --;
                if(indegree[i] == 0)
                    q.push(i);
            }
        }
        if (count != numCourses) {
            vector<int> emp;
            return emp;
        }
        return ans;
    }
};
