bool CheckBox(int i, int j, vector<vector<char>>& board) {
    unordered_map<int, int> mp;
    for(int k=i; k<i+3; k++)
        for(int l=j; l<j+3; l++) {
            if(board[k][l]=='.')
                continue;
            else if(mp.count(board[k][l]-'.')==0)
                mp[board[k][l]-'.'] = 1;
            else
                return false;
        }
    return true;
}
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_map<int, int> mp;
        unordered_map<int, int> m;
        unordered_map<int, int> m1;
        for(int i=0; i<9; i++) {
            for(int j=0; j<9; j++) {
                if(board[i][j]=='.')
                    continue;
                else if(mp.count(i*10 + (board[i][j]-'.'))==0)
                    mp[i*10 + (board[i][j]-'.')] = 1;
                else
                    return false;
            }
        }
        for(int i=0; i<9; i++) {
            for(int j=0; j<9; j++) {
                if(board[j][i]=='.')
                    continue;
                else if(m.count(i*10 + (board[j][i]-'.'))==0)
                    m[i*10 + (board[j][i]-'.')] = 1;
                else
                    return false;
            }
        }
        for(int i=0; i<9; i+=3) {
            for(int j=0; j<9; j+=3) {
                if(!CheckBox(i, j, board))
                    return false;
            }
        }
        return true;
    }
};
