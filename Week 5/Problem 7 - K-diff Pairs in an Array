void merge(vector<int>& nums, int left, int right, int mid) {
    int s1 = mid - left + 1;
    int s2 = right - mid;
    vector<int> v1(s1);
    vector<int> v2(s2);
    for (int i = 0; i < s1; ++i)
        v1[i] = nums[left + i];
    for (int i = 0; i < s2; ++i)
        v2[i] = nums[mid + 1 + i];
    int i = 0;
    int j = 0;
    int k = left;
    while(true) {
        if(i==s1) {
            if(j==s2)
                break;
            else {
                nums[k] = v2[j];
                k++;
                j++;
            }
        }
        else if(j==s2) {
            nums[k] = v1[i];
            i++;
            k++;
        }
        else if(v1[i]<v2[j]) {
            nums[k] = v1[i];
            i++;
            k++;
        }
        else {
            nums[k] = v2[j];
            j++;
            k++;
        }
    }
}
void mergeSort(vector<int>& nums, int left, int right){
    if (left >= right)
        return;
    int mid = left + (right - left) / 2;
    mergeSort(nums, left, mid);
    mergeSort(nums, mid + 1, right);
    merge(nums, left, right, mid);
}
bool find(vector<int> collect, int ele) {
    for(int i=0; i<collect.size(); i++) {
        if(collect[i] == ele)
            return true;
    }
    return false;
}
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        int ans = 0;
        mergeSort(nums, 0, nums.size()-1);
        int i = 0;
        int j = 1;
        vector<int> collect;
        while(true) {
            if(j>=nums.size()) {
                break;
            }
            else if(i==j) {
                j++;
            }
            else if(nums[j]-nums[i]>k) {
                i++;
            }
            else if(nums[j]-nums[i]<k) {
                j++;
            }
            else if(nums[j]-nums[i]==k) {
                if(find(collect, nums[i])) {
                    i++;
                    j++;
                    continue;
                }
                ans++;
                collect.push_back(nums[i]);
                i++;
                j++;
            }
        }
        return ans;
    }
};
