int moduloAns(long long ans) {
    return (ans%(10*10*10*10*10*10*10*10*10 + 7));
}
int power(int b) {
    if(b==0)
        return 1;
    if(b==1)
        return 2;
    int h = moduloAns(power(b/2));
    long long sq = h;
    if(b%2 == 0) {
        return moduloAns(sq*sq);
        }
    else
        return moduloAns(2*sq*sq);
}
class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        int ans = 0;
        int i = 0;
        int j = nums.size()-1;
        sort(nums.begin(), nums.end());
        while(true) {
            if(j<i) {
                break;
            }
            if(nums[i]+nums[j]<=target) {
                ans = moduloAns(ans + power(j-i));
                i++;
            }
            else {
                j--;
            }
        }
        return ans;
    }
};
